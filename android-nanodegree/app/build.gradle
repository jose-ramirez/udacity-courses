def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.example.bakingapp"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.config
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'BASE_URL', BASE_URL
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude group: 'com.android.support'
    })

    // the usual android dependencies
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-v4:25.3.1'

    // the video player
    compile 'com.google.android.exoplayer:exoplayer:r2.5.0'

    // dependency injection, to separate instantiation code from behaviour code
    compile 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    // glide, mostly to get the video thumbnails
    compile "com.github.bumptech.glide:glide:4.0.0-RC0"
    compile "com.github.bumptech.glide:okhttp3-integration:4.0.0-RC0"
    annotationProcessor "com.github.bumptech.glide:compiler:4.0.0-RC0"

    // reactive retrofit, makes the networking layer a bit easier :)
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'

    // timber, for easier (mostly debug) logging :)
    compile 'com.jakewharton.timber:timber:4.5.1'

    // butterknife, like dagger but specifically for android views
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'

    // schematic, to build content providers faster
    compile 'net.simonvt.schematic:schematic:0.7.0'
    annotationProcessor 'net.simonvt.schematic:schematic-compiler:0.7.0'

    // leakcanary, to check memory leaks while debugging/testing/etc
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'

    // logging-interceptor, to log http traffic as it happens
    debugCompile 'com.squareup.okhttp3:logging-interceptor:3.6.0'

    // stetho, to inspect/test sql commands on the database through the browser
    debugCompile 'com.facebook.stetho:stetho:1.5.0'
    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
    androidTestCompile 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
}



configurations.all {
    resolutionStrategy.force(
        'com.google.code.findbugs:jsr305:3.0.1',
        'com.android.support:support-annotations:25.3.0',
        'com.squareup.okhttp3:okhttp:3.8.0'
    )
}